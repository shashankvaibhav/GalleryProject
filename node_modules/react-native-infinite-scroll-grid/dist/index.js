"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
class DummyItem {
}
class Grid extends React.Component {
    constructor(props) {
        super(props);
        this.onEndReachedCalledDuringMomentum = false;
    }
    renderItem(info) {
        const marginInternal = this.props.marginInternal || 0;
        const marginExternal = this.props.marginExternal || 0;
        let [marginTop, marginLeft, marginBottom, marginRight] = [0, 0, 0, 0];
        if (info.index < this.props.numColumns) {
            marginTop = marginExternal;
            marginBottom = marginInternal;
        }
        else if (this.props.data.length - info.index <= this.props.numColumns) {
            marginBottom = marginExternal;
        }
        else {
            marginBottom = marginInternal;
        }
        if (info.index % this.props.numColumns === 0) {
            marginLeft = marginExternal;
            marginRight = marginInternal;
        }
        else if (info.index %
            this.props.numColumns ===
            this.props.numColumns - 1) {
            marginRight = marginExternal;
        }
        else {
            marginRight = marginInternal;
        }
        if (info.item instanceof DummyItem) {
            return (<react_native_1.View style={{ flex: 1, marginTop, marginLeft, marginBottom, marginRight }}/>);
        }
        else {
            return (<react_native_1.View style={{ flex: 1, marginTop, marginLeft, marginBottom, marginRight }}>
          {this.props.renderItem(info)}
        </react_native_1.View>);
        }
    }
    keyExtractor(item, index) {
        if (item instanceof DummyItem) {
            return `dummy-${index}`;
        }
        else if (this.props.keyExtractor) {
            return this.props.keyExtractor(item, index);
        }
        else {
            return index.toString();
        }
    }
    onEndReached(info) {
        if (!this.onEndReachedCalledDuringMomentum) {
            if (this.props.onEndReached)
                this.props.onEndReached(info);
            this.onEndReachedCalledDuringMomentum = true;
        }
    }
    renderLoadingIndicator() {
        if (this.props.loadingMore) {
            return (<react_native_1.View style={{ paddingTop: 10, paddingBottom: 10 }}>
          <react_native_1.ActivityIndicator />
        </react_native_1.View>);
        }
        else {
            return null;
        }
    }
    render() {
        const paddedItems = (() => {
            if (this.props.data === null)
                return [];
            const mod = this.props.data.length % this.props.numColumns;
            if (mod > 0) {
                const dummyItems = new Array(this.props.numColumns - mod).fill(new DummyItem());
                return [...this.props.data, ...dummyItems];
            }
            else {
                return [...this.props.data];
            }
        })();
        return (<react_native_1.FlatList numColumns={this.props.numColumns} style={this.props.style} columnWrapperStyle={this.props.columnWrapperStyle} data={paddedItems} keyExtractor={this.keyExtractor.bind(this)} renderItem={this.renderItem.bind(this)} ListHeaderComponent={this.props.ListHeaderComponent} ListFooterComponent={this.renderLoadingIndicator.bind(this)} ListEmptyComponent={this.props.ListEmptyComponent} onRefresh={this.props.onRefresh} refreshing={this.props.refreshing} onEndReached={this.onEndReached.bind(this)} removeClippedSubviews={this.props.removeClippedSubviews} onEndReachedThreshold={0.5} onMomentumScrollBegin={() => {
            this.onEndReachedCalledDuringMomentum = false;
        }} keyboardDismissMode={this.props.keyboardDismissMode} onScroll={this.props.onScroll} onScrollBeginDrag={this.props.onScrollBeginDrag} contentInset={this.props.contentInset} contentOffset={this.props.contentOffset}/>);
    }
}
exports.default = Grid;
